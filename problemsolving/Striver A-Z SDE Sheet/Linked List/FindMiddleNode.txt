/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
			// WHAT IF head pointer itself null? CHECK KARO !!!
        while(fast.next != null && fast.next.next != null) {
            fast = fast.next.next;
            slow = slow.next;
        }
        if(fast.next != null) {
            // for even LinkedList
            slow = slow.next;
        }
        return slow;
    }
}

class Solution {
    public ListNode middleNode(ListNode head) {
        if (head == null) return null;
        
        ListNode slow = head; // Slow pointer
        ListNode fast = head; // Fast pointer

        // Traverse the list
        while (fast != null && fast.next != null) {
            slow = slow.next;       // Move slow one step
            fast = fast.next.next; // Move fast two steps
        }

        // When fast reaches the end, slow is at the middle
        return slow;
    }
}