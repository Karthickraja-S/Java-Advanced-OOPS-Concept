
###################################################
############# 1st solution ########################
###################################################

class Solution {
    // Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
    // Output: 6
    // Explanation: The subarray [4,-1,2,1] has the largest sum 6.
    public int maxSubArray(int[] nums) {
        int sum = 0;
        int ans = nums[0];
        for(int n : nums) {
            sum += n;
            // what if the array has [-2,-1] ans is -1 right!
            ans = Math.max(ans,sum);
            if(sum < 0) {
                sum = 0;
            }
        //    ans = Math.max(ans,sum);
        }
        return ans;
    }
}


###################################################
############# 2nd solution ########################
###################################################

// bruteforce all the subarray and find.

import java.util.*;

public class tUf {
    public static int maxSubarraySum(int[] arr, int n) {
        int maxi = arr[0];

        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                int sum = 0;
                //add all the elements of subarray:
		// here we are adding the subarray. Now we can even simplify the below code 
		// just make sum=0 out of j loop & add sum+= arr[j] and check for it is > maxi. Thats it
                for (int k = i; k <= j; k++) {
                    sum += arr[k];
                }

                maxi = Math.max(maxi, sum);
            }
        }

        return maxi;
    }

    public static void main(String args[]) {
        int[] arr = { -2, 1, -3, 4, -1, 2, 1, -5, 4};
        int n = arr.length;
        int maxSum = maxSubarraySum(arr, n);
        System.out.println("The maximum subarray sum is: " + maxSum);

    }

}

