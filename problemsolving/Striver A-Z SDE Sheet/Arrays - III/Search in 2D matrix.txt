class Solution {
    public boolean binarySearch(int[] arr , int target , int start , int end) {
        if(start > end) {
            return false;
        }
        int mid = (end+start) / 2;
        if(arr[mid] == target) {
            return true;
        } else if(arr[mid] > target) {
            return binarySearch(arr,target,start,mid-1);
        } else {
            return binarySearch(arr,target,mid+1,end);
        }
    }
    public boolean searchMatrix(int[][] matrix, int target) {
        int cols = matrix[0].length;
        for(int[] row : matrix) {
            if(row[cols-1] >= target) {
                System.out.println(row[cols-1]);
                return binarySearch(row , target , 0 , cols-1);
            }
        }
        return false;
    }
}



class Solution {
    boolean binarySearch(int[][] mat, int tar, int low, int high, int m){
        if(low>high){
            return false;
        }
        int mid = (low+high)/2;
        int row = mid/m;
        int col = mid%m;
        if(mat[row][col]==tar){
            return true;
        }
        if(mat[row][col]<tar){
            return binarySearch(mat, tar, mid+1, high, m);
        }
        else{
            return binarySearch(mat, tar, low,mid-1, m);
        }

    }
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        return binarySearch(matrix, target,0, m*n-1, n);
    }
}